初始化git------------------------------
本地新建文件夹作为仓库名

git init 会生成一个隐藏文件.git

创建新文件后
git status可以查看文件的状态
git add 
git commit

如果忘记更改了什么可以用git diff来查看更改痕迹


版本回退-----------------------------------
git log命令查看
git log  --pretty=oneline 一行显示git  g

在git中用HEAD表示当前版本，也就是最新的版本
上个版本就是 HEAD^
上上版本就是 HEAD^^

git reset --hard HEAD^
回到上一个版本

回去,只要命令行工具没有关闭
git reset --hard +commit id 前几位就够了

命令行工具已经关闭，就是用git reflog的方法可以查询你的每一次命令
从而可以找到对应的commit id



工作区和暂存区------------------------------
git add加到stage暂存区
git commit可以一次将所有暂存区放到工作区


查看工作区和版本库里面的最新版本的区别-------
git diff HEAD --readme.txt


撤销修改--------------------------------------
(按我的理解就是修改了但是没有用过git add的方式把修改记录下来的情况下适用)
git checkout -- readme.txt(这里reademe前面一定要有空格键)
就是把readme.txt文件在工作区的修改全部删除。
这里分为两种情况
1.未放在暂存区。现在撤销修改就回到和版本库一模一样
2 已添加到缓存区，又做了修改，现在撤销修改就是回到添加到暂存区后的状态

所以通常的过程是
git reset HEAD file 可以吧暂存区的修改撤销掉（add的文件清空。git status是告知某个文件被修改，但没有放在缓存区）
git checkout -- readme.txt 可以将修改的提示也清空。彻底撤销修改（git status 干干净净的。）

删除文件--------------------------------------

rm + 文件名
1.确定要删除   git rm +文件名  git commit -m "remove+" 文件名
2 后悔删除 只要该文件被加入到版本库了。 git checkout -- +文件名


远程仓库--------------------------------------
由于你的本地git仓库和github仓库之间的传输是通过ssh加密的
----创建ssh key
ssh-keygen -t -rsa -C"youremail@example.com"
然后一路回车。使用默认值就可以了
会显示出ssh文件夹保存的位置，一般都在c盘
id_rsa是私钥
id_rsa.pub是公钥，可以放心告诉任何人
git remote add orgin git@github.cm:......rm
第一次链接会有一个警告，关于指纹信息。


从远程库克隆------------------------------------
git clone git@github.com:xiaomimi2/sherrry.github.com.git




分支管理----------------------------------------
你创建了一个自己的分支，别人看不见。
当我们新建一个分支，例如dev时，git就新建了一个指针叫做dev。执行master相同的提交。再把HEAD指向dev。就代表当前分支在dev上。
所以git创建分支很快，除了增加一个dev指针，工作区没有任何改变。

git合并的方法，就是直接把master指向dev的当前提交。同事HEAD指向master

合并完分支后，甚至可以删除dev，就只是把dev指针删除掉。


实战过程
创建分支-------------------------------------------
git checkout -b dev  创建切换到分支dev


下面两条命令的意思同上
git branch dev
git  checkout dev

用git branch查看当前分支


将dev分支的工作成果合并到master分支上
git checkout master 切换到master分支
git merge dev 用于合并指定分支到当前分支。合并后再查看readme.txt的内容。

注意到有fast-forward。这是快进模式。合并速度快
合并完成后可以放心删除dev
git branch -d dev


解决冲突---------------------------------------------
git checkout -b feature1
手动修改
根据git status
找到冲突的文件
然后手动进行修改文件。
git add +文件名
git commit -m 

查看冲突解决情况
git log --graph --pretty=oneline --abbrev-commit
git log --graph可以看到分支合并图。

最后删除feature分支
git branch -d feature


分支管理策略
非快速合并，可留下合并记录---------------------------------
--no-ff方式的git merge
git merge --no-ff -m "merge width no-ff" dev
不用fast forward模式，merge后就会dev指针和master指针不是同一个上。

--no-ff的好处是可以看得出来曾经得过和平。fast模式是看不出来的。


bug分支（git stash）-------------------------------------
stash功能，可以把当前工作现场储存起来，等以后现场恢复后继续工作。当前本地有工作尚未提交的情况下。。。。。。。。。。。。

git stash
git status 可以看到当前的工作区是干净的
首先确认从哪个分支上，比如是master分支
git checkout master
git checkout -b issue-101
修复完成
git add
git commit

切换回master分支
git checkout master
git merge --no-ff -m "merged bug fix 101"
git checkout dev 如果本来在dev分支上工作
git stash list
可以查看到保留的工作状态
恢复工作现场

方式一
git stash apply
git stash drop来删除

方式二
git stash pop 既恢复工作区又能够删除stash


最后用git stash list的方法查看检查



feature分支
也是新建一个分支进行修改
git checkout -b feature
修改完毕后
合并
如果突然要求不要合并删除了
这个分支必须就地销毁
git branch -d feature
未合并前删除
git branch —D feature

多人协作
git remote 查看远程仓库
git remote -v 查看详细的可以获取和push的产库

推送分支
git push origin master
git push origin dev

master分支需要时刻与远程同步 ##
dev 需要远程同步
bug不需要
feature取决于你和你的小伙伴合作在上面开发


多人协作----------------------------------------------
git push origin branch-name
如果推送失败
git pull 由于远程分支比本地更新。git pull试图合并
合并有冲突，本地解决冲突
git push origin branch-name

如果git pull提示no tracking gitinformation.说明本地分支和远程分支的链接关系没有创建
git branch --set-upstream branch-name orgin/branch-name


标签管理-----------------------------------------------
发布版本时通常在版本库中打一个标签tag。这样就唯一却行了打标签时刻的版本。版本库的一个快照
tag是为了便于记忆。和某个commit绑在一起
git checkout branch-name
git tag v1.0
git tag就可以查看所有的标签

如果是忘记打标签了，比如周一打的周五才记起来
方法是找到历史commit id
git log --pretty=oneline --abbrev-commit
git tag v0.9 6224937

注意的是标签不是按时间顺序列出，而是按按字母
git show v0.9
可以查看标签信息


用私钥签名一个标签-----------------------------------------
git tag -s v0.2 -m "sigined version 0.2 released" fec145a
签名采用PGP签名，必须安装它

删除标签
git tag -d v0.1

如果某个标签要推送要远程 git push origin v1.0
一次性推送全部尚未推送到远程的标签
git push origin --tags

如果标签已经送到远程了
先删除本地 git tag -d v0.9
远程删除 git push origin :refs/tags/v0.9
git b
查看是否真的删除了标签可以登录github查看。


.gitignore文件...............................................
git add -f +文件名可以将可能被.gitignore忽略的文件强制添加到git

.gitignore可能写的有问题，可以通过
git check-ignore命令来检查。


.gitignore 文件本身需要放在版本库里。并且可以对.gitignore做版本管理


